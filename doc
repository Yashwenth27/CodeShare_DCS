class parser:
    def __init__(self):
        self.rules=[]
        self.stack=[]
        self.table=[]
    def parse(self,word):
        self.stack.append("$")
        self.stack.append(0)
        #S=AC
        #   a b A B
        #0  s8
        #1    r1
        temp_state = '-'
        while True:
            state = self.stack[-1]
            print(word,"\n",self.stack,"\n",temp_state)
            temp_state = self.table[state][word[0]]

            if "r" in self.table[state][word[0]]:
                prodNo = int(self.table[state][word[0]][-1])
                lhs,rhs = self.rules[prodNo-1].split("=")
                for i in range(0,2*len(rhs)):
                    self.stack.pop()
                state = self.stack[-1]
                self.stack.append(lhs)
                self.stack.append(self.table[state][lhs])
            elif "s" in self.table[state][word[0]]:
                self.stack.append(word[0])
                self.stack.append(int(self.table[state][word[0]][-1]))
                word = word[1:]
            elif self.table[state][word[0]]=="accept":
                break
            else:
                print("error")
                break
        print("Success")
par = parser()
# rules = input("Enter rules S=Ac,S=nc: ").split(",")
# no = int(input("No of states: "))
# for i in range(no):
#     temp = {}
#     while True:
#         lhs = input("Term/Non term:")
#         if lhs=="end":
#             break
#         rhs = input("Goto/Action")
#         if rhs.isdigit():
#             rhs = int(rhs)
#         temp[lhs] = rhs
#     par.table.append(temp)

par.rules = ['S=AA', 'A=aA', 'A=b']

# Parsing Table (list of dictionaries for each state)
par.table = [
    {'a': 's3', 'b': 's4', 'S': 1, 'A': 2},
    {'$': 'accept'},
    {'a': 's3', 'b': 's4', 'A': 5},
    {'a': 's3', 'b': 's4', 'A': 6},
    {'$': 'r3', 'a': 'r3', 'b': 'r3'},
    {'$': 'r1'},
    {'$': 'r2', 'a': 'r2', 'b': 'r2'},
]

# Word to parse
word = "aabb$"
par.parse(word)







